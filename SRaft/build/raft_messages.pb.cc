// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_messages.proto

#include "raft_messages.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace raft_messages {
template <typename>
PROTOBUF_CONSTEXPR LogEntry::LogEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.index_)*/ ::int64_t{0}

  , /*decltype(_impl_.term_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.command_)*/ 0
} {}
struct LogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogEntryDefaultTypeInternal() {}
  union {
    LogEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogEntryDefaultTypeInternal _LogEntry_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AppendEntriesRequest::AppendEntriesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.term_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.prev_log_index_)*/ ::int64_t{0}

  , /*decltype(_impl_.prev_log_term_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.leader_commit_)*/ ::int64_t{0}

  , /*decltype(_impl_.time_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.seq_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.initial_)*/ false
} {}
struct AppendEntriesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesRequestDefaultTypeInternal() {}
  union {
    AppendEntriesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AppendEntriesResponse::AppendEntriesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.term_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.last_log_index_)*/ ::int64_t{0}

  , /*decltype(_impl_.last_log_term_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.time_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.seq_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.success_)*/ false
} {}
struct AppendEntriesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesResponseDefaultTypeInternal() {}
  union {
    AppendEntriesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RequestVoteRequest::RequestVoteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.term_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.last_log_index_)*/ ::int64_t{0}

  , /*decltype(_impl_.last_log_term_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.time_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.seq_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.initial_)*/ false
} {}
struct RequestVoteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestVoteRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestVoteRequestDefaultTypeInternal() {}
  union {
    RequestVoteRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestVoteRequestDefaultTypeInternal _RequestVoteRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RequestVoteResponse::RequestVoteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.term_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.time_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.seq_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.vote_granted_)*/ false
} {}
struct RequestVoteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestVoteResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestVoteResponseDefaultTypeInternal() {}
  union {
    RequestVoteResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR InstallSnapshotRequest::InstallSnapshotRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.term_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.last_included_index_)*/ ::int64_t{0}

  , /*decltype(_impl_.last_included_term_)*/ ::int64_t{0}

  , /*decltype(_impl_.time_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.seq_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.initial_)*/ false
} {}
struct InstallSnapshotRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstallSnapshotRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstallSnapshotRequestDefaultTypeInternal() {}
  union {
    InstallSnapshotRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstallSnapshotRequestDefaultTypeInternal _InstallSnapshotRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR InstallSnapshotResponse::InstallSnapshotResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.term_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.last_included_index_)*/ ::int64_t{0}

  , /*decltype(_impl_.last_included_term_)*/ ::int64_t{0}

  , /*decltype(_impl_.time_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.seq_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.success_)*/ false
} {}
struct InstallSnapshotResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstallSnapshotResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstallSnapshotResponseDefaultTypeInternal() {}
  union {
    InstallSnapshotResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstallSnapshotResponseDefaultTypeInternal _InstallSnapshotResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConfRecord::ConfRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.peers_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.index_)*/ ::int64_t{0}

  , /*decltype(_impl_.index2_)*/ ::int64_t{0}

  , /*decltype(_impl_.state_)*/ ::int64_t{0}
} {}
struct ConfRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfRecordDefaultTypeInternal() {}
  union {
    ConfRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfRecordDefaultTypeInternal _ConfRecord_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PersistRecord::PersistRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.vote_for_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.conf_record_)*/nullptr
  , /*decltype(_impl_.term_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.last_seq_)*/ ::uint64_t{0u}
} {}
struct PersistRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersistRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersistRecordDefaultTypeInternal() {}
  union {
    PersistRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersistRecordDefaultTypeInternal _PersistRecord_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PutAppendRequest::PutAppendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.op_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.clerkid_)*/ ::int64_t{0}

  , /*decltype(_impl_.cmdindex_)*/ ::int64_t{0}
} {}
struct PutAppendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutAppendRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutAppendRequestDefaultTypeInternal() {}
  union {
    PutAppendRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutAppendRequestDefaultTypeInternal _PutAppendRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PutAppendResponse::PutAppendResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.err_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.wrongleader_)*/ false
} {}
struct PutAppendResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutAppendResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutAppendResponseDefaultTypeInternal() {}
  union {
    PutAppendResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutAppendResponseDefaultTypeInternal _PutAppendResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetRequest::GetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.clerkid_)*/ ::int64_t{0}

  , /*decltype(_impl_.cmdindex_)*/ ::int64_t{0}
} {}
struct GetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRequestDefaultTypeInternal() {}
  union {
    GetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRequestDefaultTypeInternal _GetRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetResponse::GetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.err_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.wrongleader_)*/ false
} {}
struct GetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetResponseDefaultTypeInternal() {}
  union {
    GetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetResponseDefaultTypeInternal _GetResponse_default_instance_;
}  // namespace raft_messages
static ::_pb::Metadata file_level_metadata_raft_5fmessages_2eproto[13];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_raft_5fmessages_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_raft_5fmessages_2eproto = nullptr;
const ::uint32_t TableStruct_raft_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::raft_messages::LogEntry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::LogEntry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::raft_messages::LogEntry, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::LogEntry, _impl_.term_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::LogEntry, _impl_.command_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::LogEntry, _impl_.data_),
    1,
    2,
    3,
    0,
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesRequest, _impl_.term_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesRequest, _impl_.prev_log_index_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesRequest, _impl_.prev_log_term_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesRequest, _impl_.leader_commit_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesRequest, _impl_.entries_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesRequest, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesRequest, _impl_.seq_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesRequest, _impl_.initial_),
    0,
    1,
    2,
    3,
    4,
    ~0u,
    5,
    6,
    7,
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesResponse, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesResponse, _impl_.term_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesResponse, _impl_.last_log_index_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesResponse, _impl_.last_log_term_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesResponse, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::AppendEntriesResponse, _impl_.seq_),
    0,
    1,
    6,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteRequest, _impl_.term_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteRequest, _impl_.last_log_index_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteRequest, _impl_.last_log_term_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteRequest, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteRequest, _impl_.seq_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteRequest, _impl_.initial_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteResponse, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteResponse, _impl_.term_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteResponse, _impl_.vote_granted_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteResponse, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::RequestVoteResponse, _impl_.seq_),
    0,
    1,
    4,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotRequest, _impl_.term_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotRequest, _impl_.last_included_index_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotRequest, _impl_.last_included_term_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotRequest, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotRequest, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotRequest, _impl_.seq_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotRequest, _impl_.initial_),
    2,
    0,
    3,
    4,
    1,
    5,
    6,
    7,
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotResponse, _impl_.term_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotResponse, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotResponse, _impl_.last_included_index_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotResponse, _impl_.last_included_term_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotResponse, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::InstallSnapshotResponse, _impl_.seq_),
    1,
    0,
    2,
    3,
    6,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::raft_messages::ConfRecord, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::ConfRecord, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::raft_messages::ConfRecord, _impl_.peers_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::ConfRecord, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::ConfRecord, _impl_.index2_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::ConfRecord, _impl_.state_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::raft_messages::PersistRecord, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::PersistRecord, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::raft_messages::PersistRecord, _impl_.term_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::PersistRecord, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::PersistRecord, _impl_.vote_for_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::PersistRecord, _impl_.entries_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::PersistRecord, _impl_.conf_record_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::PersistRecord, _impl_.last_seq_),
    3,
    0,
    1,
    ~0u,
    2,
    4,
    PROTOBUF_FIELD_OFFSET(::raft_messages::PutAppendRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::PutAppendRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::raft_messages::PutAppendRequest, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::PutAppendRequest, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::PutAppendRequest, _impl_.op_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::PutAppendRequest, _impl_.clerkid_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::PutAppendRequest, _impl_.cmdindex_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::raft_messages::PutAppendResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::PutAppendResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::raft_messages::PutAppendResponse, _impl_.wrongleader_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::PutAppendResponse, _impl_.err_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::raft_messages::GetRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::GetRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::raft_messages::GetRequest, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::GetRequest, _impl_.clerkid_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::GetRequest, _impl_.cmdindex_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::raft_messages::GetResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::GetResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::raft_messages::GetResponse, _impl_.wrongleader_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::GetResponse, _impl_.err_),
    PROTOBUF_FIELD_OFFSET(::raft_messages::GetResponse, _impl_.value_),
    2,
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::raft_messages::LogEntry)},
        { 16, 33, -1, sizeof(::raft_messages::AppendEntriesRequest)},
        { 42, 57, -1, sizeof(::raft_messages::AppendEntriesResponse)},
        { 64, 79, -1, sizeof(::raft_messages::RequestVoteRequest)},
        { 86, 99, -1, sizeof(::raft_messages::RequestVoteResponse)},
        { 104, 120, -1, sizeof(::raft_messages::InstallSnapshotRequest)},
        { 128, 143, -1, sizeof(::raft_messages::InstallSnapshotResponse)},
        { 150, 162, -1, sizeof(::raft_messages::ConfRecord)},
        { 166, 180, -1, sizeof(::raft_messages::PersistRecord)},
        { 186, 199, -1, sizeof(::raft_messages::PutAppendRequest)},
        { 204, 214, -1, sizeof(::raft_messages::PutAppendResponse)},
        { 216, 227, -1, sizeof(::raft_messages::GetRequest)},
        { 230, 241, -1, sizeof(::raft_messages::GetResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::raft_messages::_LogEntry_default_instance_._instance,
    &::raft_messages::_AppendEntriesRequest_default_instance_._instance,
    &::raft_messages::_AppendEntriesResponse_default_instance_._instance,
    &::raft_messages::_RequestVoteRequest_default_instance_._instance,
    &::raft_messages::_RequestVoteResponse_default_instance_._instance,
    &::raft_messages::_InstallSnapshotRequest_default_instance_._instance,
    &::raft_messages::_InstallSnapshotResponse_default_instance_._instance,
    &::raft_messages::_ConfRecord_default_instance_._instance,
    &::raft_messages::_PersistRecord_default_instance_._instance,
    &::raft_messages::_PutAppendRequest_default_instance_._instance,
    &::raft_messages::_PutAppendResponse_default_instance_._instance,
    &::raft_messages::_GetRequest_default_instance_._instance,
    &::raft_messages::_GetResponse_default_instance_._instance,
};
const char descriptor_table_protodef_raft_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023raft_messages.proto\022\rraft_messages\"F\n\010"
    "LogEntry\022\r\n\005index\030\001 \002(\003\022\014\n\004term\030\002 \002(\004\022\017\n"
    "\007command\030\003 \002(\005\022\014\n\004data\030\004 \001(\014\"\316\001\n\024AppendE"
    "ntriesRequest\022\014\n\004name\030\001 \002(\t\022\014\n\004term\030\002 \002("
    "\004\022\026\n\016prev_log_index\030\003 \002(\003\022\025\n\rprev_log_te"
    "rm\030\004 \002(\004\022\025\n\rleader_commit\030\005 \002(\003\022(\n\007entri"
    "es\030\006 \003(\0132\027.raft_messages.LogEntry\022\014\n\004tim"
    "e\030\007 \002(\004\022\013\n\003seq\030\010 \002(\004\022\017\n\007initial\030\t \002(\010\"\216\001"
    "\n\025AppendEntriesResponse\022\014\n\004name\030\001 \002(\t\022\014\n"
    "\004term\030\002 \002(\004\022\017\n\007success\030\003 \002(\010\022\026\n\016last_log"
    "_index\030\004 \002(\003\022\025\n\rlast_log_term\030\005 \002(\004\022\014\n\004t"
    "ime\030\006 \002(\004\022\013\n\003seq\030\007 \002(\004\"\213\001\n\022RequestVoteRe"
    "quest\022\014\n\004name\030\001 \002(\t\022\014\n\004term\030\002 \002(\004\022\026\n\016las"
    "t_log_index\030\003 \002(\003\022\025\n\rlast_log_term\030\004 \002(\004"
    "\022\014\n\004time\030\005 \002(\004\022\013\n\003seq\030\006 \002(\004\022\017\n\007initial\030\007"
    " \002(\010\"b\n\023RequestVoteResponse\022\014\n\004name\030\001 \002("
    "\t\022\014\n\004term\030\002 \002(\004\022\024\n\014vote_granted\030\003 \002(\010\022\014\n"
    "\004time\030\004 \002(\004\022\013\n\003seq\030\005 \002(\004\"\247\001\n\026InstallSnap"
    "shotRequest\022\014\n\004term\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022"
    "\033\n\023last_included_index\030\003 \002(\003\022\032\n\022last_inc"
    "luded_term\030\004 \002(\003\022\014\n\004data\030\006 \002(\014\022\014\n\004time\030\007"
    " \002(\004\022\013\n\003seq\030\010 \002(\004\022\017\n\007initial\030\t \002(\010\"\232\001\n\027I"
    "nstallSnapshotResponse\022\014\n\004term\030\001 \002(\004\022\014\n\004"
    "name\030\002 \002(\t\022\033\n\023last_included_index\030\003 \002(\003\022"
    "\032\n\022last_included_term\030\004 \002(\003\022\017\n\007success\030\005"
    " \002(\010\022\014\n\004time\030\006 \002(\004\022\013\n\003seq\030\007 \002(\004\"I\n\nConfR"
    "ecord\022\r\n\005peers\030\001 \002(\t\022\r\n\005index\030\002 \002(\003\022\016\n\006i"
    "ndex2\030\003 \002(\003\022\r\n\005state\030\004 \002(\003\"\251\001\n\rPersistRe"
    "cord\022\014\n\004term\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022\020\n\010vote"
    "_for\030\003 \002(\t\022(\n\007entries\030\004 \003(\0132\027.raft_messa"
    "ges.LogEntry\022.\n\013conf_record\030\005 \001(\0132\031.raft"
    "_messages.ConfRecord\022\020\n\010last_seq\030\006 \002(\004\"]"
    "\n\020PutAppendRequest\022\013\n\003key\030\001 \002(\t\022\r\n\005value"
    "\030\002 \002(\t\022\n\n\002op\030\003 \002(\t\022\017\n\007ClerkID\030\004 \002(\003\022\020\n\010c"
    "mdIndex\030\005 \002(\003\"5\n\021PutAppendResponse\022\023\n\013Wr"
    "ongLeader\030\001 \002(\010\022\013\n\003Err\030\002 \002(\t\"<\n\nGetReque"
    "st\022\013\n\003Key\030\001 \002(\t\022\017\n\007ClerkID\030\002 \002(\003\022\020\n\010CmdI"
    "ndex\030\003 \002(\003\">\n\013GetResponse\022\023\n\013WrongLeader"
    "\030\001 \002(\010\022\013\n\003Err\030\002 \002(\t\022\r\n\005Value\030\003 \002(\t2\250\002\n\014R"
    "aftMessages\022V\n\013RequestVote\022!.raft_messag"
    "es.RequestVoteRequest\032\".raft_messages.Re"
    "questVoteResponse\"\000\022\\\n\rAppendEntries\022#.r"
    "aft_messages.AppendEntriesRequest\032$.raft"
    "_messages.AppendEntriesResponse\"\000\022b\n\017Ins"
    "tallSnapshot\022%.raft_messages.InstallSnap"
    "shotRequest\032&.raft_messages.InstallSnaps"
    "hotResponse\"\0002\272\002\n\022RaftStreamMessages\022Z\n\013"
    "RequestVote\022!.raft_messages.RequestVoteR"
    "equest\032\".raft_messages.RequestVoteRespon"
    "se\"\000(\0010\001\022`\n\rAppendEntries\022#.raft_message"
    "s.AppendEntriesRequest\032$.raft_messages.A"
    "ppendEntriesResponse\"\000(\0010\001\022f\n\017InstallSna"
    "pshot\022%.raft_messages.InstallSnapshotReq"
    "uest\032&.raft_messages.InstallSnapshotResp"
    "onse\"\000(\0010\0012\234\001\n\010kvserver\022>\n\003Get\022\031.raft_me"
    "ssages.GetRequest\032\032.raft_messages.GetRes"
    "ponse\"\000\022P\n\tPutAppend\022\037.raft_messages.Put"
    "AppendRequest\032 .raft_messages.PutAppendR"
    "esponse\"\000"
};
static ::absl::once_flag descriptor_table_raft_5fmessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_raft_5fmessages_2eproto = {
    false,
    false,
    2329,
    descriptor_table_protodef_raft_5fmessages_2eproto,
    "raft_messages.proto",
    &descriptor_table_raft_5fmessages_2eproto_once,
    nullptr,
    0,
    13,
    schemas,
    file_default_instances,
    TableStruct_raft_5fmessages_2eproto::offsets,
    file_level_metadata_raft_5fmessages_2eproto,
    file_level_enum_descriptors_raft_5fmessages_2eproto,
    file_level_service_descriptors_raft_5fmessages_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_raft_5fmessages_2eproto_getter() {
  return &descriptor_table_raft_5fmessages_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_raft_5fmessages_2eproto(&descriptor_table_raft_5fmessages_2eproto);
namespace raft_messages {
// ===================================================================

class LogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<LogEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LogEntry, _impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

LogEntry::LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_messages.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_) {}

    , decltype(_impl_.index_) {}

    , decltype(_impl_.term_) {}

    , decltype(_impl_.command_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.command_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.command_));
  // @@protoc_insertion_point(copy_constructor:raft_messages.LogEntry)
}

inline void LogEntry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_) {}

    , decltype(_impl_.index_) { ::int64_t{0} }

    , decltype(_impl_.term_) { ::uint64_t{0u} }

    , decltype(_impl_.command_) { 0 }

  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:raft_messages.LogEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogEntry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void LogEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messages.LogEntry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.index_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.command_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.command_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_term(&has_bits);
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int32 command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_command(&has_bits);
          _impl_.command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LogEntry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messages.LogEntry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_index(), target);
  }

  // required uint64 term = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_term(), target);
  }

  // required int32 command = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_command(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_messages.LogEntry)
  return target;
}

::size_t LogEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_messages.LogEntry)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int64 index = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_index());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required uint64 term = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required int32 command = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_command());
  }

  return total_size;
}
::size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messages.LogEntry)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required int64 index = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_index());

    // required uint64 term = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());

    // required int32 command = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_command());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogEntry::GetClassData() const { return &_class_data_; }


void LogEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogEntry*>(&to_msg);
  auto& from = static_cast<const LogEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft_messages.LogEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.term_ = from._impl_.term_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.command_ = from._impl_.command_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messages.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.command_)
      + sizeof(LogEntry::_impl_.command_)
      - PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_5fmessages_2eproto_getter, &descriptor_table_raft_5fmessages_2eproto_once,
      file_level_metadata_raft_5fmessages_2eproto[0]);
}
// ===================================================================

class AppendEntriesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AppendEntriesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prev_log_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prev_log_term(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_leader_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_initial(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

AppendEntriesRequest::AppendEntriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_messages.AppendEntriesRequest)
}
AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendEntriesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.term_) {}

    , decltype(_impl_.prev_log_index_) {}

    , decltype(_impl_.prev_log_term_) {}

    , decltype(_impl_.leader_commit_) {}

    , decltype(_impl_.time_) {}

    , decltype(_impl_.seq_) {}

    , decltype(_impl_.initial_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.initial_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.initial_));
  // @@protoc_insertion_point(copy_constructor:raft_messages.AppendEntriesRequest)
}

inline void AppendEntriesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.term_) { ::uint64_t{0u} }

    , decltype(_impl_.prev_log_index_) { ::int64_t{0} }

    , decltype(_impl_.prev_log_term_) { ::uint64_t{0u} }

    , decltype(_impl_.leader_commit_) { ::int64_t{0} }

    , decltype(_impl_.time_) { ::uint64_t{0u} }

    , decltype(_impl_.seq_) { ::uint64_t{0u} }

    , decltype(_impl_.initial_) { false }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppendEntriesRequest::~AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:raft_messages.AppendEntriesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendEntriesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_entries()->~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void AppendEntriesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messages.AppendEntriesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_entries()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.term_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.initial_) -
        reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.initial_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.AppendEntriesRequest.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_term(&has_bits);
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 prev_log_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_prev_log_index(&has_bits);
          _impl_.prev_log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 prev_log_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_prev_log_term(&has_bits);
          _impl_.prev_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 leader_commit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_leader_commit(&has_bits);
          _impl_.leader_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .raft_messages.LogEntry entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 seq = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_seq(&has_bits);
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bool initial = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_initial(&has_bits);
          _impl_.initial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AppendEntriesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messages.AppendEntriesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.AppendEntriesRequest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required uint64 term = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_term(), target);
  }

  // required int64 prev_log_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_prev_log_index(), target);
  }

  // required uint64 prev_log_term = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_prev_log_term(), target);
  }

  // required int64 leader_commit = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_leader_commit(), target);
  }

  // repeated .raft_messages.LogEntry entries = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required uint64 time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_time(), target);
  }

  // required uint64 seq = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_seq(), target);
  }

  // required bool initial = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_initial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_messages.AppendEntriesRequest)
  return target;
}

::size_t AppendEntriesRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_messages.AppendEntriesRequest)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string name = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required uint64 term = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required int64 prev_log_index = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_prev_log_index());
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required uint64 prev_log_term = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_prev_log_term());
  }

  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    // required int64 leader_commit = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_leader_commit());
  }

  if ((_impl_._has_bits_[0] & 0x00000020u) != 0) {
    // required uint64 time = 7;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time());
  }

  if ((_impl_._has_bits_[0] & 0x00000040u) != 0) {
    // required uint64 seq = 8;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seq());
  }

  if ((_impl_._has_bits_[0] & 0x00000080u) != 0) {
    // required bool initial = 9;
    total_size += 2;
  }

  return total_size;
}
::size_t AppendEntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messages.AppendEntriesRequest)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());

    // required uint64 term = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());

    // required int64 prev_log_index = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_prev_log_index());

    // required uint64 prev_log_term = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_prev_log_term());

    // required int64 leader_commit = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_leader_commit());

    // required uint64 time = 7;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time());

    // required uint64 seq = 8;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seq());

    // required bool initial = 9;
    total_size += 2;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft_messages.LogEntry entries = 6;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_internal_entries()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendEntriesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesRequest::GetClassData() const { return &_class_data_; }


void AppendEntriesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendEntriesRequest*>(&to_msg);
  auto& from = static_cast<const AppendEntriesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft_messages.AppendEntriesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entries()->MergeFrom(from._internal_entries());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.term_ = from._impl_.term_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.prev_log_index_ = from._impl_.prev_log_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.prev_log_term_ = from._impl_.prev_log_term_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.leader_commit_ = from._impl_.leader_commit_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.seq_ = from._impl_.seq_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.initial_ = from._impl_.initial_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messages.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_entries()))
    return false;
  return true;
}

void AppendEntriesRequest::InternalSwap(AppendEntriesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_entries()->InternalSwap(other->_internal_mutable_entries());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.initial_)
      + sizeof(AppendEntriesRequest::_impl_.initial_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_5fmessages_2eproto_getter, &descriptor_table_raft_5fmessages_2eproto_once,
      file_level_metadata_raft_5fmessages_2eproto[1]);
}
// ===================================================================

class AppendEntriesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AppendEntriesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_log_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_log_term(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

AppendEntriesResponse::AppendEntriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_messages.AppendEntriesResponse)
}
AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendEntriesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.term_) {}

    , decltype(_impl_.last_log_index_) {}

    , decltype(_impl_.last_log_term_) {}

    , decltype(_impl_.time_) {}

    , decltype(_impl_.seq_) {}

    , decltype(_impl_.success_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:raft_messages.AppendEntriesResponse)
}

inline void AppendEntriesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.term_) { ::uint64_t{0u} }

    , decltype(_impl_.last_log_index_) { ::int64_t{0} }

    , decltype(_impl_.last_log_term_) { ::uint64_t{0u} }

    , decltype(_impl_.time_) { ::uint64_t{0u} }

    , decltype(_impl_.seq_) { ::uint64_t{0u} }

    , decltype(_impl_.success_) { false }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppendEntriesResponse::~AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:raft_messages.AppendEntriesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendEntriesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void AppendEntriesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messages.AppendEntriesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.term_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.success_) -
        reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.success_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.AppendEntriesResponse.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_term(&has_bits);
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 last_log_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_last_log_index(&has_bits);
          _impl_.last_log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 last_log_term = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_last_log_term(&has_bits);
          _impl_.last_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 seq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_seq(&has_bits);
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AppendEntriesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messages.AppendEntriesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.AppendEntriesResponse.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required uint64 term = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_term(), target);
  }

  // required bool success = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_success(), target);
  }

  // required int64 last_log_index = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_last_log_index(), target);
  }

  // required uint64 last_log_term = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_last_log_term(), target);
  }

  // required uint64 time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_time(), target);
  }

  // required uint64 seq = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_messages.AppendEntriesResponse)
  return target;
}

::size_t AppendEntriesResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_messages.AppendEntriesResponse)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string name = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required uint64 term = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required int64 last_log_index = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_log_index());
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required uint64 last_log_term = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_log_term());
  }

  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    // required uint64 time = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time());
  }

  if ((_impl_._has_bits_[0] & 0x00000020u) != 0) {
    // required uint64 seq = 7;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seq());
  }

  if ((_impl_._has_bits_[0] & 0x00000040u) != 0) {
    // required bool success = 3;
    total_size += 2;
  }

  return total_size;
}
::size_t AppendEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messages.AppendEntriesResponse)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());

    // required uint64 term = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());

    // required int64 last_log_index = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_log_index());

    // required uint64 last_log_term = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_log_term());

    // required uint64 time = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time());

    // required uint64 seq = 7;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seq());

    // required bool success = 3;
    total_size += 2;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendEntriesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesResponse::GetClassData() const { return &_class_data_; }


void AppendEntriesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendEntriesResponse*>(&to_msg);
  auto& from = static_cast<const AppendEntriesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft_messages.AppendEntriesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.term_ = from._impl_.term_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.last_log_index_ = from._impl_.last_log_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.last_log_term_ = from._impl_.last_log_term_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.seq_ = from._impl_.seq_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.success_ = from._impl_.success_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messages.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AppendEntriesResponse::InternalSwap(AppendEntriesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, _impl_.success_)
      + sizeof(AppendEntriesResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_5fmessages_2eproto_getter, &descriptor_table_raft_5fmessages_2eproto_once,
      file_level_metadata_raft_5fmessages_2eproto[2]);
}
// ===================================================================

class RequestVoteRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestVoteRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_log_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_log_term(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_initial(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

RequestVoteRequest::RequestVoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_messages.RequestVoteRequest)
}
RequestVoteRequest::RequestVoteRequest(const RequestVoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestVoteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.term_) {}

    , decltype(_impl_.last_log_index_) {}

    , decltype(_impl_.last_log_term_) {}

    , decltype(_impl_.time_) {}

    , decltype(_impl_.seq_) {}

    , decltype(_impl_.initial_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.initial_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.initial_));
  // @@protoc_insertion_point(copy_constructor:raft_messages.RequestVoteRequest)
}

inline void RequestVoteRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.term_) { ::uint64_t{0u} }

    , decltype(_impl_.last_log_index_) { ::int64_t{0} }

    , decltype(_impl_.last_log_term_) { ::uint64_t{0u} }

    , decltype(_impl_.time_) { ::uint64_t{0u} }

    , decltype(_impl_.seq_) { ::uint64_t{0u} }

    , decltype(_impl_.initial_) { false }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestVoteRequest::~RequestVoteRequest() {
  // @@protoc_insertion_point(destructor:raft_messages.RequestVoteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestVoteRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void RequestVoteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestVoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messages.RequestVoteRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.term_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.initial_) -
        reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.initial_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.RequestVoteRequest.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_term(&has_bits);
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 last_log_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_last_log_index(&has_bits);
          _impl_.last_log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 last_log_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_last_log_term(&has_bits);
          _impl_.last_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 seq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_seq(&has_bits);
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bool initial = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_initial(&has_bits);
          _impl_.initial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RequestVoteRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messages.RequestVoteRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.RequestVoteRequest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required uint64 term = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_term(), target);
  }

  // required int64 last_log_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_last_log_index(), target);
  }

  // required uint64 last_log_term = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_last_log_term(), target);
  }

  // required uint64 time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_time(), target);
  }

  // required uint64 seq = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_seq(), target);
  }

  // required bool initial = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_initial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_messages.RequestVoteRequest)
  return target;
}

::size_t RequestVoteRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_messages.RequestVoteRequest)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string name = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required uint64 term = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required int64 last_log_index = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_log_index());
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required uint64 last_log_term = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_log_term());
  }

  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    // required uint64 time = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time());
  }

  if ((_impl_._has_bits_[0] & 0x00000020u) != 0) {
    // required uint64 seq = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seq());
  }

  if ((_impl_._has_bits_[0] & 0x00000040u) != 0) {
    // required bool initial = 7;
    total_size += 2;
  }

  return total_size;
}
::size_t RequestVoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messages.RequestVoteRequest)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());

    // required uint64 term = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());

    // required int64 last_log_index = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_log_index());

    // required uint64 last_log_term = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_log_term());

    // required uint64 time = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time());

    // required uint64 seq = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seq());

    // required bool initial = 7;
    total_size += 2;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVoteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestVoteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVoteRequest::GetClassData() const { return &_class_data_; }


void RequestVoteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestVoteRequest*>(&to_msg);
  auto& from = static_cast<const RequestVoteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft_messages.RequestVoteRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.term_ = from._impl_.term_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.last_log_index_ = from._impl_.last_log_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.last_log_term_ = from._impl_.last_log_term_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.seq_ = from._impl_.seq_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.initial_ = from._impl_.initial_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteRequest::CopyFrom(const RequestVoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messages.RequestVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RequestVoteRequest::InternalSwap(RequestVoteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_.initial_)
      + sizeof(RequestVoteRequest::_impl_.initial_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteRequest, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_5fmessages_2eproto_getter, &descriptor_table_raft_5fmessages_2eproto_once,
      file_level_metadata_raft_5fmessages_2eproto[3]);
}
// ===================================================================

class RequestVoteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestVoteResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RequestVoteResponse, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vote_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

RequestVoteResponse::RequestVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_messages.RequestVoteResponse)
}
RequestVoteResponse::RequestVoteResponse(const RequestVoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestVoteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.term_) {}

    , decltype(_impl_.time_) {}

    , decltype(_impl_.seq_) {}

    , decltype(_impl_.vote_granted_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.vote_granted_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.vote_granted_));
  // @@protoc_insertion_point(copy_constructor:raft_messages.RequestVoteResponse)
}

inline void RequestVoteResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.term_) { ::uint64_t{0u} }

    , decltype(_impl_.time_) { ::uint64_t{0u} }

    , decltype(_impl_.seq_) { ::uint64_t{0u} }

    , decltype(_impl_.vote_granted_) { false }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestVoteResponse::~RequestVoteResponse() {
  // @@protoc_insertion_point(destructor:raft_messages.RequestVoteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestVoteResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void RequestVoteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messages.RequestVoteResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.term_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.vote_granted_) -
        reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.vote_granted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.RequestVoteResponse.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_term(&has_bits);
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bool vote_granted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_vote_granted(&has_bits);
          _impl_.vote_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 seq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_seq(&has_bits);
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RequestVoteResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messages.RequestVoteResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.RequestVoteResponse.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required uint64 term = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_term(), target);
  }

  // required bool vote_granted = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_vote_granted(), target);
  }

  // required uint64 time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_time(), target);
  }

  // required uint64 seq = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_messages.RequestVoteResponse)
  return target;
}

::size_t RequestVoteResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_messages.RequestVoteResponse)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string name = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required uint64 term = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required uint64 time = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time());
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required uint64 seq = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seq());
  }

  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    // required bool vote_granted = 3;
    total_size += 2;
  }

  return total_size;
}
::size_t RequestVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messages.RequestVoteResponse)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());

    // required uint64 term = 2;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());

    // required uint64 time = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time());

    // required uint64 seq = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seq());

    // required bool vote_granted = 3;
    total_size += 2;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVoteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestVoteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVoteResponse::GetClassData() const { return &_class_data_; }


void RequestVoteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestVoteResponse*>(&to_msg);
  auto& from = static_cast<const RequestVoteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft_messages.RequestVoteResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.term_ = from._impl_.term_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seq_ = from._impl_.seq_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.vote_granted_ = from._impl_.vote_granted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteResponse::CopyFrom(const RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messages.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RequestVoteResponse::InternalSwap(RequestVoteResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteResponse, _impl_.vote_granted_)
      + sizeof(RequestVoteResponse::_impl_.vote_granted_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteResponse, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_5fmessages_2eproto_getter, &descriptor_table_raft_5fmessages_2eproto_once,
      file_level_metadata_raft_5fmessages_2eproto[4]);
}
// ===================================================================

class InstallSnapshotRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<InstallSnapshotRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InstallSnapshotRequest, _impl_._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_included_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_included_term(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_initial(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

InstallSnapshotRequest::InstallSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_messages.InstallSnapshotRequest)
}
InstallSnapshotRequest::InstallSnapshotRequest(const InstallSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstallSnapshotRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.term_) {}

    , decltype(_impl_.last_included_index_) {}

    , decltype(_impl_.last_included_term_) {}

    , decltype(_impl_.time_) {}

    , decltype(_impl_.seq_) {}

    , decltype(_impl_.initial_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.initial_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.initial_));
  // @@protoc_insertion_point(copy_constructor:raft_messages.InstallSnapshotRequest)
}

inline void InstallSnapshotRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.term_) { ::uint64_t{0u} }

    , decltype(_impl_.last_included_index_) { ::int64_t{0} }

    , decltype(_impl_.last_included_term_) { ::int64_t{0} }

    , decltype(_impl_.time_) { ::uint64_t{0u} }

    , decltype(_impl_.seq_) { ::uint64_t{0u} }

    , decltype(_impl_.initial_) { false }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstallSnapshotRequest::~InstallSnapshotRequest() {
  // @@protoc_insertion_point(destructor:raft_messages.InstallSnapshotRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstallSnapshotRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.data_.Destroy();
}

void InstallSnapshotRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstallSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messages.InstallSnapshotRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.term_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.initial_) -
        reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.initial_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstallSnapshotRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.InstallSnapshotRequest.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 last_included_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_last_included_index(&has_bits);
          _impl_.last_included_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 last_included_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_last_included_term(&has_bits);
          _impl_.last_included_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bytes data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 seq = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_seq(&has_bits);
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bool initial = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_initial(&has_bits);
          _impl_.initial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InstallSnapshotRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messages.InstallSnapshotRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 term = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_term(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.InstallSnapshotRequest.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // required int64 last_included_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_last_included_index(), target);
  }

  // required int64 last_included_term = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_last_included_term(), target);
  }

  // required bytes data = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // required uint64 time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_time(), target);
  }

  // required uint64 seq = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_seq(), target);
  }

  // required bool initial = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_initial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_messages.InstallSnapshotRequest)
  return target;
}

::size_t InstallSnapshotRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_messages.InstallSnapshotRequest)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string name = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required bytes data = 6;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required uint64 term = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required int64 last_included_index = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_included_index());
  }

  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    // required int64 last_included_term = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_included_term());
  }

  if ((_impl_._has_bits_[0] & 0x00000020u) != 0) {
    // required uint64 time = 7;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time());
  }

  if ((_impl_._has_bits_[0] & 0x00000040u) != 0) {
    // required uint64 seq = 8;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seq());
  }

  if ((_impl_._has_bits_[0] & 0x00000080u) != 0) {
    // required bool initial = 9;
    total_size += 2;
  }

  return total_size;
}
::size_t InstallSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messages.InstallSnapshotRequest)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());

    // required bytes data = 6;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());

    // required uint64 term = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());

    // required int64 last_included_index = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_included_index());

    // required int64 last_included_term = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_included_term());

    // required uint64 time = 7;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time());

    // required uint64 seq = 8;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seq());

    // required bool initial = 9;
    total_size += 2;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstallSnapshotRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstallSnapshotRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstallSnapshotRequest::GetClassData() const { return &_class_data_; }


void InstallSnapshotRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstallSnapshotRequest*>(&to_msg);
  auto& from = static_cast<const InstallSnapshotRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft_messages.InstallSnapshotRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.term_ = from._impl_.term_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.last_included_index_ = from._impl_.last_included_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.last_included_term_ = from._impl_.last_included_term_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.seq_ = from._impl_.seq_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.initial_ = from._impl_.initial_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstallSnapshotRequest::CopyFrom(const InstallSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messages.InstallSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InstallSnapshotRequest::InternalSwap(InstallSnapshotRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstallSnapshotRequest, _impl_.initial_)
      + sizeof(InstallSnapshotRequest::_impl_.initial_)
      - PROTOBUF_FIELD_OFFSET(InstallSnapshotRequest, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstallSnapshotRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_5fmessages_2eproto_getter, &descriptor_table_raft_5fmessages_2eproto_once,
      file_level_metadata_raft_5fmessages_2eproto[5]);
}
// ===================================================================

class InstallSnapshotResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<InstallSnapshotResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InstallSnapshotResponse, _impl_._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_included_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_included_term(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

InstallSnapshotResponse::InstallSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_messages.InstallSnapshotResponse)
}
InstallSnapshotResponse::InstallSnapshotResponse(const InstallSnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstallSnapshotResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.term_) {}

    , decltype(_impl_.last_included_index_) {}

    , decltype(_impl_.last_included_term_) {}

    , decltype(_impl_.time_) {}

    , decltype(_impl_.seq_) {}

    , decltype(_impl_.success_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:raft_messages.InstallSnapshotResponse)
}

inline void InstallSnapshotResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.term_) { ::uint64_t{0u} }

    , decltype(_impl_.last_included_index_) { ::int64_t{0} }

    , decltype(_impl_.last_included_term_) { ::int64_t{0} }

    , decltype(_impl_.time_) { ::uint64_t{0u} }

    , decltype(_impl_.seq_) { ::uint64_t{0u} }

    , decltype(_impl_.success_) { false }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstallSnapshotResponse::~InstallSnapshotResponse() {
  // @@protoc_insertion_point(destructor:raft_messages.InstallSnapshotResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstallSnapshotResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void InstallSnapshotResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstallSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messages.InstallSnapshotResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.term_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.success_) -
        reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.success_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstallSnapshotResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.InstallSnapshotResponse.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 last_included_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_last_included_index(&has_bits);
          _impl_.last_included_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 last_included_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_last_included_term(&has_bits);
          _impl_.last_included_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bool success = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 seq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_seq(&has_bits);
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InstallSnapshotResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messages.InstallSnapshotResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 term = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_term(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.InstallSnapshotResponse.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // required int64 last_included_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_last_included_index(), target);
  }

  // required int64 last_included_term = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_last_included_term(), target);
  }

  // required bool success = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_success(), target);
  }

  // required uint64 time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_time(), target);
  }

  // required uint64 seq = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_messages.InstallSnapshotResponse)
  return target;
}

::size_t InstallSnapshotResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_messages.InstallSnapshotResponse)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string name = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required uint64 term = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required int64 last_included_index = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_included_index());
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required int64 last_included_term = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_included_term());
  }

  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    // required uint64 time = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time());
  }

  if ((_impl_._has_bits_[0] & 0x00000020u) != 0) {
    // required uint64 seq = 7;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seq());
  }

  if ((_impl_._has_bits_[0] & 0x00000040u) != 0) {
    // required bool success = 5;
    total_size += 2;
  }

  return total_size;
}
::size_t InstallSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messages.InstallSnapshotResponse)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());

    // required uint64 term = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());

    // required int64 last_included_index = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_included_index());

    // required int64 last_included_term = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_included_term());

    // required uint64 time = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_time());

    // required uint64 seq = 7;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seq());

    // required bool success = 5;
    total_size += 2;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstallSnapshotResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstallSnapshotResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstallSnapshotResponse::GetClassData() const { return &_class_data_; }


void InstallSnapshotResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstallSnapshotResponse*>(&to_msg);
  auto& from = static_cast<const InstallSnapshotResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft_messages.InstallSnapshotResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.term_ = from._impl_.term_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.last_included_index_ = from._impl_.last_included_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.last_included_term_ = from._impl_.last_included_term_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.seq_ = from._impl_.seq_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.success_ = from._impl_.success_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstallSnapshotResponse::CopyFrom(const InstallSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messages.InstallSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InstallSnapshotResponse::InternalSwap(InstallSnapshotResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstallSnapshotResponse, _impl_.success_)
      + sizeof(InstallSnapshotResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(InstallSnapshotResponse, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstallSnapshotResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_5fmessages_2eproto_getter, &descriptor_table_raft_5fmessages_2eproto_once,
      file_level_metadata_raft_5fmessages_2eproto[6]);
}
// ===================================================================

class ConfRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfRecord>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ConfRecord, _impl_._has_bits_);
  static void set_has_peers(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ConfRecord::ConfRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_messages.ConfRecord)
}
ConfRecord::ConfRecord(const ConfRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.peers_) {}

    , decltype(_impl_.index_) {}

    , decltype(_impl_.index2_) {}

    , decltype(_impl_.state_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.peers_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.peers_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.peers_.Set(from._internal_peers(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:raft_messages.ConfRecord)
}

inline void ConfRecord::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.peers_) {}

    , decltype(_impl_.index_) { ::int64_t{0} }

    , decltype(_impl_.index2_) { ::int64_t{0} }

    , decltype(_impl_.state_) { ::int64_t{0} }

  };
  _impl_.peers_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.peers_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfRecord::~ConfRecord() {
  // @@protoc_insertion_point(destructor:raft_messages.ConfRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfRecord::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.peers_.Destroy();
}

void ConfRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messages.ConfRecord)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.peers_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.index_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string peers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_peers();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.ConfRecord.peers");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 index2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_index2(&has_bits);
          _impl_.index2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConfRecord::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messages.ConfRecord)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string peers = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_peers();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.ConfRecord.peers");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required int64 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_index(), target);
  }

  // required int64 index2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_index2(), target);
  }

  // required int64 state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_messages.ConfRecord)
  return target;
}

::size_t ConfRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_messages.ConfRecord)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string peers = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_peers());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int64 index = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_index());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required int64 index2 = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_index2());
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required int64 state = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_state());
  }

  return total_size;
}
::size_t ConfRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messages.ConfRecord)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string peers = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_peers());

    // required int64 index = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_index());

    // required int64 index2 = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_index2());

    // required int64 state = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfRecord::GetClassData() const { return &_class_data_; }


void ConfRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfRecord*>(&to_msg);
  auto& from = static_cast<const ConfRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft_messages.ConfRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_peers(from._internal_peers());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index2_ = from._impl_.index2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfRecord::CopyFrom(const ConfRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messages.ConfRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfRecord::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ConfRecord::InternalSwap(ConfRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.peers_, lhs_arena,
                                       &other->_impl_.peers_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfRecord, _impl_.state_)
      + sizeof(ConfRecord::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(ConfRecord, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_5fmessages_2eproto_getter, &descriptor_table_raft_5fmessages_2eproto_once,
      file_level_metadata_raft_5fmessages_2eproto[7]);
}
// ===================================================================

class PersistRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<PersistRecord>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PersistRecord, _impl_._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vote_for(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::raft_messages::ConfRecord& conf_record(const PersistRecord* msg);
  static void set_has_conf_record(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001b) ^ 0x0000001b) != 0;
  }
};

const ::raft_messages::ConfRecord&
PersistRecord::_Internal::conf_record(const PersistRecord* msg) {
  return *msg->_impl_.conf_record_;
}
PersistRecord::PersistRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_messages.PersistRecord)
}
PersistRecord::PersistRecord(const PersistRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PersistRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.vote_for_) {}

    , decltype(_impl_.conf_record_){nullptr}
    , decltype(_impl_.term_) {}

    , decltype(_impl_.last_seq_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.vote_for_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.vote_for_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.vote_for_.Set(from._internal_vote_for(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.conf_record_ = new ::raft_messages::ConfRecord(*from._impl_.conf_record_);
  }
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.last_seq_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.last_seq_));
  // @@protoc_insertion_point(copy_constructor:raft_messages.PersistRecord)
}

inline void PersistRecord::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.vote_for_) {}

    , decltype(_impl_.conf_record_){nullptr}
    , decltype(_impl_.term_) { ::uint64_t{0u} }

    , decltype(_impl_.last_seq_) { ::uint64_t{0u} }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vote_for_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.vote_for_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PersistRecord::~PersistRecord() {
  // @@protoc_insertion_point(destructor:raft_messages.PersistRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PersistRecord::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_entries()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.vote_for_.Destroy();
  if (this != internal_default_instance()) delete _impl_.conf_record_;
}

void PersistRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PersistRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messages.PersistRecord)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_entries()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.vote_for_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.conf_record_ != nullptr);
      _impl_.conf_record_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.term_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.last_seq_) -
        reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.last_seq_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersistRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.PersistRecord.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required string vote_for = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vote_for();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.PersistRecord.vote_for");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .raft_messages.LogEntry entries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .raft_messages.ConfRecord conf_record = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_conf_record(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required uint64 last_seq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_last_seq(&has_bits);
          _impl_.last_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PersistRecord::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messages.PersistRecord)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 term = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_term(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.PersistRecord.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // required string vote_for = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_vote_for();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.PersistRecord.vote_for");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated .raft_messages.LogEntry entries = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .raft_messages.ConfRecord conf_record = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::conf_record(this),
        _Internal::conf_record(this).GetCachedSize(), target, stream);
  }

  // required uint64 last_seq = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_last_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_messages.PersistRecord)
  return target;
}

::size_t PersistRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_messages.PersistRecord)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string name = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required string vote_for = 3;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_vote_for());
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required uint64 term = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());
  }

  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    // required uint64 last_seq = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_seq());
  }

  return total_size;
}
::size_t PersistRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messages.PersistRecord)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());

    // required string vote_for = 3;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_vote_for());

    // required uint64 term = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_term());

    // required uint64 last_seq = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_seq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft_messages.LogEntry entries = 4;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_internal_entries()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .raft_messages.ConfRecord conf_record = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conf_record_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PersistRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PersistRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PersistRecord::GetClassData() const { return &_class_data_; }


void PersistRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PersistRecord*>(&to_msg);
  auto& from = static_cast<const PersistRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft_messages.PersistRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entries()->MergeFrom(from._internal_entries());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_vote_for(from._internal_vote_for());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_conf_record()->::raft_messages::ConfRecord::MergeFrom(
          from._internal_conf_record());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.term_ = from._impl_.term_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.last_seq_ = from._impl_.last_seq_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PersistRecord::CopyFrom(const PersistRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messages.PersistRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistRecord::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_entries()))
    return false;
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!_impl_.conf_record_->IsInitialized()) return false;
  }
  return true;
}

void PersistRecord::InternalSwap(PersistRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_entries()->InternalSwap(other->_internal_mutable_entries());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.vote_for_, lhs_arena,
                                       &other->_impl_.vote_for_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersistRecord, _impl_.last_seq_)
      + sizeof(PersistRecord::_impl_.last_seq_)
      - PROTOBUF_FIELD_OFFSET(PersistRecord, _impl_.conf_record_)>(
          reinterpret_cast<char*>(&_impl_.conf_record_),
          reinterpret_cast<char*>(&other->_impl_.conf_record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_5fmessages_2eproto_getter, &descriptor_table_raft_5fmessages_2eproto_once,
      file_level_metadata_raft_5fmessages_2eproto[8]);
}
// ===================================================================

class PutAppendRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PutAppendRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PutAppendRequest, _impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_op(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clerkid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cmdindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

PutAppendRequest::PutAppendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_messages.PutAppendRequest)
}
PutAppendRequest::PutAppendRequest(const PutAppendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutAppendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.op_) {}

    , decltype(_impl_.clerkid_) {}

    , decltype(_impl_.cmdindex_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  _impl_.op_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.op_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.op_.Set(from._internal_op(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.clerkid_, &from._impl_.clerkid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cmdindex_) -
    reinterpret_cast<char*>(&_impl_.clerkid_)) + sizeof(_impl_.cmdindex_));
  // @@protoc_insertion_point(copy_constructor:raft_messages.PutAppendRequest)
}

inline void PutAppendRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.op_) {}

    , decltype(_impl_.clerkid_) { ::int64_t{0} }

    , decltype(_impl_.cmdindex_) { ::int64_t{0} }

  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.op_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.op_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutAppendRequest::~PutAppendRequest() {
  // @@protoc_insertion_point(destructor:raft_messages.PutAppendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutAppendRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
  _impl_.op_.Destroy();
}

void PutAppendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutAppendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messages.PutAppendRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.op_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.clerkid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.cmdindex_) -
        reinterpret_cast<char*>(&_impl_.clerkid_)) + sizeof(_impl_.cmdindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutAppendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.PutAppendRequest.key");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.PutAppendRequest.value");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required string op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_op();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.PutAppendRequest.op");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 ClerkID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_clerkid(&has_bits);
          _impl_.clerkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 cmdIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_cmdindex(&has_bits);
          _impl_.cmdindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PutAppendRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messages.PutAppendRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.PutAppendRequest.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.PutAppendRequest.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // required string op = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_op();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.PutAppendRequest.op");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // required int64 ClerkID = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_clerkid(), target);
  }

  // required int64 cmdIndex = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_cmdindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_messages.PutAppendRequest)
  return target;
}

::size_t PutAppendRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_messages.PutAppendRequest)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string key = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required string value = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required string op = 3;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_op());
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required int64 ClerkID = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_clerkid());
  }

  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    // required int64 cmdIndex = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_cmdindex());
  }

  return total_size;
}
::size_t PutAppendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messages.PutAppendRequest)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());

    // required string value = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_value());

    // required string op = 3;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_op());

    // required int64 ClerkID = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_clerkid());

    // required int64 cmdIndex = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_cmdindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutAppendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutAppendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutAppendRequest::GetClassData() const { return &_class_data_; }


void PutAppendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutAppendRequest*>(&to_msg);
  auto& from = static_cast<const PutAppendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft_messages.PutAppendRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_op(from._internal_op());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.clerkid_ = from._impl_.clerkid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cmdindex_ = from._impl_.cmdindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutAppendRequest::CopyFrom(const PutAppendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messages.PutAppendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutAppendRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PutAppendRequest::InternalSwap(PutAppendRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.op_, lhs_arena,
                                       &other->_impl_.op_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutAppendRequest, _impl_.cmdindex_)
      + sizeof(PutAppendRequest::_impl_.cmdindex_)
      - PROTOBUF_FIELD_OFFSET(PutAppendRequest, _impl_.clerkid_)>(
          reinterpret_cast<char*>(&_impl_.clerkid_),
          reinterpret_cast<char*>(&other->_impl_.clerkid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PutAppendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_5fmessages_2eproto_getter, &descriptor_table_raft_5fmessages_2eproto_once,
      file_level_metadata_raft_5fmessages_2eproto[9]);
}
// ===================================================================

class PutAppendResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PutAppendResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PutAppendResponse, _impl_._has_bits_);
  static void set_has_wrongleader(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PutAppendResponse::PutAppendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_messages.PutAppendResponse)
}
PutAppendResponse::PutAppendResponse(const PutAppendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutAppendResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.err_) {}

    , decltype(_impl_.wrongleader_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.err_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.err_.Set(from._internal_err(), _this->GetArenaForAllocation());
  }
  _this->_impl_.wrongleader_ = from._impl_.wrongleader_;
  // @@protoc_insertion_point(copy_constructor:raft_messages.PutAppendResponse)
}

inline void PutAppendResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.err_) {}

    , decltype(_impl_.wrongleader_) { false }

  };
  _impl_.err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.err_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutAppendResponse::~PutAppendResponse() {
  // @@protoc_insertion_point(destructor:raft_messages.PutAppendResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutAppendResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.err_.Destroy();
}

void PutAppendResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutAppendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messages.PutAppendResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.err_.ClearNonDefaultToEmpty();
  }
  _impl_.wrongleader_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutAppendResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool WrongLeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_wrongleader(&has_bits);
          _impl_.wrongleader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required string Err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_err();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.PutAppendResponse.Err");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PutAppendResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messages.PutAppendResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool WrongLeader = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_wrongleader(), target);
  }

  // required string Err = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_err();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.PutAppendResponse.Err");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_messages.PutAppendResponse)
  return target;
}

::size_t PutAppendResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_messages.PutAppendResponse)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string Err = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_err());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required bool WrongLeader = 1;
    total_size += 2;
  }

  return total_size;
}
::size_t PutAppendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messages.PutAppendResponse)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Err = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_err());

    // required bool WrongLeader = 1;
    total_size += 2;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutAppendResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutAppendResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutAppendResponse::GetClassData() const { return &_class_data_; }


void PutAppendResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutAppendResponse*>(&to_msg);
  auto& from = static_cast<const PutAppendResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft_messages.PutAppendResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_err(from._internal_err());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.wrongleader_ = from._impl_.wrongleader_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutAppendResponse::CopyFrom(const PutAppendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messages.PutAppendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutAppendResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PutAppendResponse::InternalSwap(PutAppendResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.err_, lhs_arena,
                                       &other->_impl_.err_, rhs_arena);

  swap(_impl_.wrongleader_, other->_impl_.wrongleader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutAppendResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_5fmessages_2eproto_getter, &descriptor_table_raft_5fmessages_2eproto_once,
      file_level_metadata_raft_5fmessages_2eproto[10]);
}
// ===================================================================

class GetRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetRequest, _impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clerkid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cmdindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

GetRequest::GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_messages.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_) {}

    , decltype(_impl_.clerkid_) {}

    , decltype(_impl_.cmdindex_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.clerkid_, &from._impl_.clerkid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cmdindex_) -
    reinterpret_cast<char*>(&_impl_.clerkid_)) + sizeof(_impl_.cmdindex_));
  // @@protoc_insertion_point(copy_constructor:raft_messages.GetRequest)
}

inline void GetRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_) {}

    , decltype(_impl_.clerkid_) { ::int64_t{0} }

    , decltype(_impl_.cmdindex_) { ::int64_t{0} }

  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:raft_messages.GetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void GetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messages.GetRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.clerkid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.cmdindex_) -
        reinterpret_cast<char*>(&_impl_.clerkid_)) + sizeof(_impl_.cmdindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.GetRequest.Key");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 ClerkID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_clerkid(&has_bits);
          _impl_.clerkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int64 CmdIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_cmdindex(&has_bits);
          _impl_.cmdindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messages.GetRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string Key = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.GetRequest.Key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required int64 ClerkID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_clerkid(), target);
  }

  // required int64 CmdIndex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_cmdindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_messages.GetRequest)
  return target;
}

::size_t GetRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_messages.GetRequest)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string Key = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int64 ClerkID = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_clerkid());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required int64 CmdIndex = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_cmdindex());
  }

  return total_size;
}
::size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messages.GetRequest)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string Key = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());

    // required int64 ClerkID = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_clerkid());

    // required int64 CmdIndex = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_cmdindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRequest::GetClassData() const { return &_class_data_; }


void GetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRequest*>(&to_msg);
  auto& from = static_cast<const GetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft_messages.GetRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.clerkid_ = from._impl_.clerkid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cmdindex_ = from._impl_.cmdindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messages.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRequest, _impl_.cmdindex_)
      + sizeof(GetRequest::_impl_.cmdindex_)
      - PROTOBUF_FIELD_OFFSET(GetRequest, _impl_.clerkid_)>(
          reinterpret_cast<char*>(&_impl_.clerkid_),
          reinterpret_cast<char*>(&other->_impl_.clerkid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_5fmessages_2eproto_getter, &descriptor_table_raft_5fmessages_2eproto_once,
      file_level_metadata_raft_5fmessages_2eproto[11]);
}
// ===================================================================

class GetResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetResponse, _impl_._has_bits_);
  static void set_has_wrongleader(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

GetResponse::GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_messages.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.err_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.wrongleader_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.err_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.err_.Set(from._internal_err(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  _this->_impl_.wrongleader_ = from._impl_.wrongleader_;
  // @@protoc_insertion_point(copy_constructor:raft_messages.GetResponse)
}

inline void GetResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.err_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.wrongleader_) { false }

  };
  _impl_.err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.err_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:raft_messages.GetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.err_.Destroy();
  _impl_.value_.Destroy();
}

void GetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_messages.GetResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.err_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.wrongleader_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool WrongLeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_wrongleader(&has_bits);
          _impl_.wrongleader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required string Err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_err();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.GetResponse.Err");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required string Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "raft_messages.GetResponse.Value");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_messages.GetResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool WrongLeader = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_wrongleader(), target);
  }

  // required string Err = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_err();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.GetResponse.Err");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // required string Value = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "raft_messages.GetResponse.Value");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_messages.GetResponse)
  return target;
}

::size_t GetResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raft_messages.GetResponse)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string Err = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_err());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required string Value = 3;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required bool WrongLeader = 1;
    total_size += 2;
  }

  return total_size;
}
::size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_messages.GetResponse)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string Err = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_err());

    // required string Value = 3;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_value());

    // required bool WrongLeader = 1;
    total_size += 2;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetResponse::GetClassData() const { return &_class_data_; }


void GetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetResponse*>(&to_msg);
  auto& from = static_cast<const GetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:raft_messages.GetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_err(from._internal_err());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.wrongleader_ = from._impl_.wrongleader_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_messages.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.err_, lhs_arena,
                                       &other->_impl_.err_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);

  swap(_impl_.wrongleader_, other->_impl_.wrongleader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_5fmessages_2eproto_getter, &descriptor_table_raft_5fmessages_2eproto_once,
      file_level_metadata_raft_5fmessages_2eproto[12]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace raft_messages
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raft_messages::LogEntry*
Arena::CreateMaybeMessage< ::raft_messages::LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_messages::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_messages::AppendEntriesRequest*
Arena::CreateMaybeMessage< ::raft_messages::AppendEntriesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_messages::AppendEntriesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_messages::AppendEntriesResponse*
Arena::CreateMaybeMessage< ::raft_messages::AppendEntriesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_messages::AppendEntriesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_messages::RequestVoteRequest*
Arena::CreateMaybeMessage< ::raft_messages::RequestVoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_messages::RequestVoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_messages::RequestVoteResponse*
Arena::CreateMaybeMessage< ::raft_messages::RequestVoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_messages::RequestVoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_messages::InstallSnapshotRequest*
Arena::CreateMaybeMessage< ::raft_messages::InstallSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_messages::InstallSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_messages::InstallSnapshotResponse*
Arena::CreateMaybeMessage< ::raft_messages::InstallSnapshotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_messages::InstallSnapshotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_messages::ConfRecord*
Arena::CreateMaybeMessage< ::raft_messages::ConfRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_messages::ConfRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_messages::PersistRecord*
Arena::CreateMaybeMessage< ::raft_messages::PersistRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_messages::PersistRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_messages::PutAppendRequest*
Arena::CreateMaybeMessage< ::raft_messages::PutAppendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_messages::PutAppendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_messages::PutAppendResponse*
Arena::CreateMaybeMessage< ::raft_messages::PutAppendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_messages::PutAppendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_messages::GetRequest*
Arena::CreateMaybeMessage< ::raft_messages::GetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_messages::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_messages::GetResponse*
Arena::CreateMaybeMessage< ::raft_messages::GetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_messages::GetResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
